type Vault @entity {
  id: ID!
  address: String!
  maxSlippage: BigInt!
  protocolFee: BigInt!
  accounts: [Account!] @derivedFrom(field: "vault")
  strategies: [Strategy!]! # @derivedFrom(field: "vault")
}

type Strategy @entity {
  id: ID!
  vault: Vault!
  token: ERC20!
  metadata: String!
  whitelisted: Boolean!
  lastRate: Rate
  rates: [Rate!]! # @derivedFrom(field: "strategy")
  accounts: [AccountStrategy!] @derivedFrom(field: "strategy")
}

type Rate @entity {
  id: ID!
  index: BigInt!
  strategy: Strategy!
  valueRate: BigInt!
  totalValue: BigInt!
  totalShares: BigInt!
  shareValue: BigInt!
  accumulatedShareValue: BigInt!
  block: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Account @entity {
  id: ID!
  vault: Vault!
  portfolio: Portfolio @derivedFrom(field: "account")
  balances: [AccountBalance!] @derivedFrom(field: "account")
  strategies: [AccountStrategy!] @derivedFrom(field: "account")
}

type AccountBalance @entity {
  id: ID!
  token: ERC20!
  amount: BigInt!
  account: Account!
}

type AccountStrategy @entity {
  id: ID!
  shares: BigInt!
  invested: BigInt!
  account: Account!
  strategy: Strategy!
}

type Portfolio @entity {
  id: ID!
  account: Account
  depositFee: BigInt!
  withdrawFee: BigInt!
  performanceFee: BigInt!
  feeCollector: Bytes!
  agreement: Agreement @derivedFrom(field: "portfolio")
}

type Agreement @entity {
  id: ID!
  name: String!
  maxSlippage: BigInt!
  portfolio: Portfolio!
  withdrawers: [String!]!
  managers: [Manager!]!
  allowedTokens: Allowed!
  customTokens: [ERC20!]!
  allowedStrategies: Allowed!
  customStrategies: [Strategy!]!
}

type Manager @entity {
  id: ID!
  agreements: [Agreement!] @derivedFrom(field: "managers")
}

enum Allowed {
  OnlyCustom
  CustomAndWhitelisted
  Any
}

type ERC20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  whitelisted: Boolean!
}
